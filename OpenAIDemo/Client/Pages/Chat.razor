@page "/chat"
@using Azure.Storage.Blobs
@using OpenAIDemo.Shared;
@using Markdig;
@using System.Text.Json;
@inject HttpClient Http
@inject IJSRuntime JSRuntime;

<div class="chat-container">
    <div class="chat-header">
        <h3>Blazor Chat</h3>
    </div>

    <div class="chat-messages" @ref="messagesContainer">
        @foreach (var message in messages)
        {
            <div class="chat-message @(message.IsOwnMessage ? "own-message" : "other-message")">
                @foreach (var image in message.Images)
                {
                    <img src="@image" class="chat-image" />
                }
                <span>@((MarkupString)Markdown.ToHtml(message.Content))</span>
            </div>
        }
    </div>

    <div class="chat-input">
        @foreach (var image in uploadedImages)
        {
            <div class="image-thumbnail">
                <img src="@image" class="chat-image-thumbnail" />
                <button @onclick="() => RemoveImage(image)" class="remove-image-button">X</button>
            </div>
        }
        <button @onclick="TriggerFileInput" class="upload-button"><span class="oi oi-paperclip" aria-hidden="true"></span></button>
        <InputFile @ref="inputFile" OnChange="HandleImageUpload" multiple id="fileInput" style="display:none" />
        <input @bind="newMessage" @bind:event="oninput" placeholder="Type your message..." @onkeydown="@EnterAsync" />
        <button @onclick="SendMessageAsync">Send</button>
    </div>
</div>

@code {
    private const long MAX_SIZE = 1024 * 1024 * 1024;

    private ElementReference messagesContainer;
    private ElementReference theButton;

    private InputFile inputFile;

    private string newMessage = string.Empty;
    private List<string> uploadedImages = new List<string>();

    private List<ChatMessage> messages = new List<ChatMessage>();
    private ChatSession chatSession;

    private class ChatMessage
    {
        public string Content { get; set; }
        public bool IsOwnMessage { get; set; }
        public List<string> Images { get; set; } = new List<string>();
    }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var response = await Http.PostAsync("api/chat", null);

        response.EnsureSuccessStatusCode();

        chatSession = await response.Content.ReadFromJsonAsync<ChatSession>();
    }

    // private async Task SendMessageAsync()
    // {
    //     if (!string.IsNullOrWhiteSpace(newMessage))
    //     {
    //         var text = newMessage;

    //         messages.Add(new ChatMessage { Content = newMessage, IsOwnMessage = true });
    //         // Scroll to bottom logic here
    //         newMessage = string.Empty;

    //         var chatMessage = new ChatMessage { Content = "...", IsOwnMessage = false };
    //         messages.Add(chatMessage);
    //         this.StateHasChanged();

    //         var response = await Http.PostAsJsonAsync<string>($"api/chat/{chatSession.Id}/message", text);
    //         response.EnsureSuccessStatusCode();
    //         var responseMessage = await response.Content.ReadAsStringAsync();

    //         chatMessage.Content = responseMessage;
    //         this.StateHasChanged();
    //         await ScrollToBottom();
    //     }
    // }

    private async Task SendMessageAsync()
    {
        if (!string.IsNullOrWhiteSpace(newMessage))
        {
            var text = new[] { newMessage }
                .Concat(this.uploadedImages);

            messages.Add(new ChatMessage { Content = newMessage, IsOwnMessage = true, Images = this.uploadedImages });
            // Scroll to bottom logic here
            newMessage = string.Empty;
            this.uploadedImages = new List<string>();

            var chatMessage = new ChatMessage { Content = "...", IsOwnMessage = false };
            messages.Add(chatMessage);
            this.StateHasChanged();
            await ScrollToBottom();

            var content = JsonContent.Create(text);

            IAsyncEnumerable<string> items =
                this.Http.PostAndGetStreamAsync<string>($"api/chat/{chatSession.Id}/message-stream", content);

            chatMessage.Content = string.Empty;
            await foreach (string item in items)
            {
                chatMessage.Content += item;
                this.StateHasChanged();
                await ScrollToBottom();
            }
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("MyFunctions.scrollToBottom", messagesContainer);
    }

    private async Task EnterAsync(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessageAsync();
        }
    }

    private void RemoveImage(string image)
    {
        uploadedImages.Remove(image);
    }

    private async Task TriggerFileInput()
    {
        await JSRuntime.InvokeAsync<object>("HTMLElement.prototype.click.call", inputFile.Element);
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var fileNames = e.GetMultipleFiles().Select(f => f.Name);

        var content = JsonContent.Create(fileNames);

        var response = await this.Http.PostAsync($"/api/files/{chatSession.Id}/upload", content);

        response.EnsureSuccessStatusCode();

        var imageUrls = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();

        var tasks = new List<Task>();
        foreach (var file in e.GetMultipleFiles())
        {
            var blob = new BlobClient(new Uri(imageUrls[file.Name]));

            tasks.Add(blob.UploadAsync(file.OpenReadStream(maxAllowedSize: MAX_SIZE), overwrite: true));

            uploadedImages.Add(imageUrls[file.Name]);
        }

        await Task.WhenAll(tasks);

        this.StateHasChanged();
    }
}